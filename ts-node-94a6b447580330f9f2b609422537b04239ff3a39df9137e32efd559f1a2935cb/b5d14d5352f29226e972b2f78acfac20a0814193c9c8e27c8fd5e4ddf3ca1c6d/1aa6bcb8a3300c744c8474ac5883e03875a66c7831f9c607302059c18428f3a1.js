"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const LocaleProps_1 = require("./LocaleProps");
const LocaleContext_1 = require("./LocaleContext");
class Locale extends React.Component {
    constructor(props) {
        super(props);
        const { listLanguages } = props;
        const languages = listLanguages ? this.listFilter(listLanguages) : props.languages;
        const defaultLanguage = props.defaultLanguage ? props.defaultLanguage : Object.keys(languages)[0];
        this.state = {
            language: defaultLanguage,
            listLanguages,
            languages,
            switchLocale: (language) => this.setState({ language })
        };
    }
    shouldComponentUpdate(nextProps, nextState) {
        if (nextState.language !== this.state.language) {
            this.forceUpdate();
        }
        return false;
    }
    render() {
        return (React.createElement(LocaleContext_1.LocaleContext.Provider, { value: this.state }, this.props.children));
    }
    listFilter(listLanguages) {
        let list = {};
        listLanguages.forEach((key) => list = Object.assign({}, list, { [key]: this.props.languages[key] }));
        return list;
    }
}
Locale.propTypes = LocaleProps_1.LocalePropsTypes;
exports.Locale = Locale;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvbWFrYXJlbmtvZC9Eb2N1bWVudHMvcmVhY3QtbG9jYWxlLWFwcC9zcmMvTG9jYWxlL0xvY2FsZUNvbXBvbmVudC9Mb2NhbGUudHN4Iiwic291cmNlcyI6WyIvaG9tZS9tYWthcmVua29kL0RvY3VtZW50cy9yZWFjdC1sb2NhbGUtYXBwL3NyYy9Mb2NhbGUvTG9jYWxlQ29tcG9uZW50L0xvY2FsZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFDL0IsK0NBQThEO0FBRTlELG1EQUFnRDtBQUVoRCxZQUFvQixTQUFRLEtBQUssQ0FBQyxTQUFtQztJQUdqRSxZQUFtQixLQUFLO1FBQ3BCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNiLE1BQU0sRUFBRSxhQUFhLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDaEMsTUFBTSxTQUFTLEdBQVcsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQzNGLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEcsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNULFFBQVEsRUFBRSxlQUFlO1lBQ3pCLGFBQWE7WUFDYixTQUFTO1lBQ1QsWUFBWSxFQUFFLENBQUMsUUFBZ0IsRUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLFFBQVEsRUFBQyxDQUFDO1NBQ3RFLENBQUE7SUFDTCxDQUFDO0lBRU0scUJBQXFCLENBQUMsU0FBUyxFQUFFLFNBQVM7UUFDN0MsSUFBSSxTQUFTLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQzVDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFTSxNQUFNO1FBQ1QsT0FBTyxDQUNILG9CQUFDLDZCQUFhLENBQUMsUUFBUSxJQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxJQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDQyxDQUM1QixDQUFDO0lBQ04sQ0FBQztJQUVPLFVBQVUsQ0FBQyxhQUF1QjtRQUN0QyxJQUFJLElBQUksR0FBVyxFQUFFLENBQUM7UUFDdEIsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxxQkFBTyxJQUFJLElBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRSxDQUFDLENBQUM7UUFDcEYsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7QUFsQ3VCLGdCQUFTLEdBQUcsOEJBQWdCLENBQUM7QUFEekQsd0JBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBMb2NhbGVQcm9wcywgTG9jYWxlUHJvcHNUeXBlcyB9IGZyb20gXCIuL0xvY2FsZVByb3BzXCI7XG5pbXBvcnQge0xvY2FsZVN0YXRlfSBmcm9tIFwiLi9Mb2NhbGVTdGF0ZVwiO1xuaW1wb3J0IHsgTG9jYWxlQ29udGV4dCB9IGZyb20gXCIuL0xvY2FsZUNvbnRleHRcIjtcblxuZXhwb3J0IGNsYXNzIExvY2FsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxMb2NhbGVQcm9wcywgTG9jYWxlU3RhdGU+IHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBwcm9wVHlwZXMgPSBMb2NhbGVQcm9wc1R5cGVzO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgY29uc3QgeyBsaXN0TGFuZ3VhZ2VzIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgbGFuZ3VhZ2VzOiBvYmplY3QgPSBsaXN0TGFuZ3VhZ2VzID8gdGhpcy5saXN0RmlsdGVyKGxpc3RMYW5ndWFnZXMpIDogcHJvcHMubGFuZ3VhZ2VzO1xuICAgICAgICBjb25zdCBkZWZhdWx0TGFuZ3VhZ2UgPSBwcm9wcy5kZWZhdWx0TGFuZ3VhZ2UgPyBwcm9wcy5kZWZhdWx0TGFuZ3VhZ2UgOiBPYmplY3Qua2V5cyhsYW5ndWFnZXMpWzBdO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbGFuZ3VhZ2U6IGRlZmF1bHRMYW5ndWFnZSxcbiAgICAgICAgICAgIGxpc3RMYW5ndWFnZXMsXG4gICAgICAgICAgICBsYW5ndWFnZXMsXG4gICAgICAgICAgICBzd2l0Y2hMb2NhbGU6IChsYW5ndWFnZTogc3RyaW5nKTogdm9pZCA9PiB0aGlzLnNldFN0YXRlKHtsYW5ndWFnZX0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIGlmIChuZXh0U3RhdGUubGFuZ3VhZ2UgIT09IHRoaXMuc3RhdGUubGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxMb2NhbGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGlzLnN0YXRlfT5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgIDwvTG9jYWxlQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxpc3RGaWx0ZXIobGlzdExhbmd1YWdlczogc3RyaW5nW10pOiBvYmplY3Qge1xuICAgICAgICBsZXQgbGlzdDogb2JqZWN0ID0ge307XG4gICAgICAgIGxpc3RMYW5ndWFnZXMuZm9yRWFjaCgoa2V5KSA9PiBsaXN0ID0gey4uLmxpc3QsIFtrZXldOiB0aGlzLnByb3BzLmxhbmd1YWdlc1trZXldIH0pO1xuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG59XG4iXX0=